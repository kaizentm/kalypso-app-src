name: ci

on:
  push:
    branches:
      - main
      - eedorenko/*
  workflow_dispatch:

env:
  IMAGE_REPO: ghcr.io/${{ github.repository }}/${{ vars.APP_NAME }}
  PACKAGE_STORAGE_BASE_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}

jobs:
  CI:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
    - name: Login to ghcr
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Generate Image Tag
      id: generate_image_tag
      run: |
          VERSION=${{ vars.SEM_VER }}-${{ github.run_number }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV     
    - name: Build and Push to ghcr
      uses: docker/build-push-action@v2
      with:
        push: true
        context: .
        tags: ${{ env.IMAGE_REPO }}:${{ env.VERSION }}, ${{ env.IMAGE_REPO }}:latest  
    - name: Build debian package
      id: build_debian_package
      run: |
        containerID=$(docker run -dt $IMAGE_REPO:$VERSION)
        docker cp $containerID:/opt/app/sample .
        docker build --platform linux/x86_64 --build-arg  version_string=$VERSION --build-arg binary_name=sample --build-arg deb_package_name=hello-world --build-arg deb_package_description="Hello World Application" -t fpm -f Dockerfile-fpm .
        containerID=$(docker run --platform linux/x86_64 -dt fpm)
        mkdir -p package
        package_name=$APP_NAME-$VERSION.deb
        docker cp $containerID:/deb-package/$package_name ./package/
      env:
        APP_NAME: ${{ vars.APP_NAME }}
    - name: Publish debian package
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: package
        branch: packages
        target-folder: .
        clean: false
    - name: Start CD
      run: |
          gh workflow run cd.yaml -f commit_id="$PROMOTED_COMMIT_ID" -f version="$VERSION" -r ${{ github.ref_name }}         
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROMOTED_COMMIT_ID: ${{ github.sha }}

  #     - name: Checkout Configs
  #       uses: actions/checkout@v2.3.4
  #       with:
  #         ref: dev-configs
  #         path: configs        
  #     - name: Read Image Tags
  #       run: |
  #         IMAGE_TAG=${{ needs.Build_Push_Image.outputs.image_tag }}          
  #         echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  #         VERSION=$IMAGE_TAG
  #         echo "VERSION=$VERSION" >> $GITHUB_ENV
  #     - name: Read Package Name
  #       run: |
  #         PACKAGE_NAME=${{ needs.Build_Push_Image.outputs.package_name }}          
  #         echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
  #         PACKAGE_STORAGE_URL=$PACKAGE_STORAGE_BASE_URL/$PACKAGE_NAME  
  #         echo "PACKAGE_STORAGE_URL=$PACKAGE_STORAGE_URL" >> $GITHUB_ENV
  #     - name: Generate Manifests for Functional Tests
  #       run: |
  #         .github/workflows/utils/generate-manifests.sh ${{ github.workspace }}/helm ${{ github.workspace }}/configs/functional-tests manifests/functional-test 
  #     - name: Generate Manifests for Performance Tests
  #       run: |
  #         .github/workflows/utils/generate-manifests.sh ${{ github.workspace }}/helm ${{ github.workspace }}/configs/performance-tests manifests/performance-test 
  #     - name: Generate Manifests for Integration Tests
  #       run: |
  #         .github/workflows/utils/generate-ansible-manifests.sh ${{ github.workspace }}/ansible manifests/int-test 
  #         cp ${{ github.workspace }}/configs/int-tests/* manifests/int-test/
  #       env:
  #         CONFIG_FILE: app-config.sh
  #         COMMAND: sample          

  #     - name: Create PR
  #       run: |        
  #         .github/workflows/utils//create-pr.sh -s ${{ github.workspace }}/manifests -d . -r ${{ secrets.MANIFESTS_REPO }} -b dev -i ${{ github.run_number }} -t ${{ secrets.MANIFESTS_TOKEN }} -m N
    
  # Deploy_To_Stage:
  #     runs-on: ubuntu-latest
  #     needs: [Build_Push_Image, Deploy_To_Dev]
  #     environment: stage            
  #     steps:
  #     - name: Checkout Source
  #       uses: actions/checkout@v2.3.4
  #     - name: Checkout Configs
  #       uses: actions/checkout@v2.3.4
  #       with:
  #         ref: stage-configs
  #         path: configs        
  #     - name: Read Image Tags
  #       run: |
  #         IMAGE_TAG=${{ needs.Build_Push_Image.outputs.image_tag }}          
  #         echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  #         VERSION=$IMAGE_TAG
  #         echo "VERSION=$VERSION" >> $GITHUB_ENV
  #     - name: Read Package Name
  #       run: |
  #         PACKAGE_NAME=${{ needs.Build_Push_Image.outputs.package_name }}          
  #         echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
  #         PACKAGE_STORAGE_URL=$PACKAGE_STORAGE_BASE_URL/$PACKAGE_NAME  
  #         echo "PACKAGE_STORAGE_URL=$PACKAGE_STORAGE_URL" >> $GITHUB_ENV
  #     - name: Generate Manifests for UAT
  #       run: |
  #         .github/workflows/utils/generate-manifests.sh ${{ github.workspace }}/helm ${{ github.workspace }}/configs/uat-tests manifests/uat-test 
  #     - name: Generate Manifests for Integration Tests
  #       run: |
  #         .github/workflows/utils/generate-ansible-manifests.sh ${{ github.workspace }}/ansible manifests/int-test 
  #         cp ${{ github.workspace }}/configs/int-tests/* manifests/int-test/
  #       env:
  #         CONFIG_FILE: app-config.sh
  #         COMMAND: sample          
  #     - name: Create PR
  #       run: |        
  #         .github/workflows/utils//create-pr.sh -s ${{ github.workspace }}/manifests -d . -r ${{ secrets.MANIFESTS_REPO }} -b stage -i ${{ github.run_number }} -t ${{ secrets.MANIFESTS_TOKEN }}  -m N



